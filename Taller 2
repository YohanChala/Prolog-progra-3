# -*- coding: utf-8 -*-
"""Sudoku.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/118vId0vHPECp9aoYOZuP7PfPB9_ZtANO
"""

#Definimos una variable Dom que almacenará un conjunto de números del 1 al 9
Dom=set(range(1,10))
#Imprime el conjunto con los valores del 1 al 9
print(Dom)

#Definimos una segunda variable que almacena una cadena de caracteres.
IdCols="ABCDEFGHI"

#Importamos un módulo que mas adelante usaremos para hacer el producto
#entre las anteriores variables, y lo llamaremos como it
import itertools as it
Varkeys=list(it.product(Dom,IdCols))
print(Varkeys)

#Creamos una variable strVarkeys que almacenará una lista con el producto
#cartesiano y dandole el formato de ultimo valor y primer valor
strVarkeys=[f"{key[1]}{key[0]}" for key in Varkeys]
print(strVarkeys)

#Definimos una variable VarDoms que será un diccionario, con una llave que
#serán los elementos de la lista strVarkeys y el valor sera una copia del
#Dominio que creamos en Dom
VarDoms={key:Dom.copy() for key in strVarkeys}
VarDoms

#Nos permite leer un archivo en donde almacenaremos los tableros de Sudoku
#Si alguna casilla tiene mas de un valor se le asignará el dominio, de
#lo contrario se dejará el único valor que tenga
with open('Board', 'r') as archivo:
    lineas = archivo.readlines()
    for i, (clave, valor) in enumerate(VarDoms.items()):
      if lineas[i].strip().isdigit() and len(lineas[i].strip()) == 1:
        VarDoms[clave] = {int(lineas[i].strip())}

VarDoms

VarDoms['B1'].discard(3)
print(Dom)
VarDoms

def generateConstraints(IdCols, Dom): #Definimos una función generateConstraints que recibe como parámetros IdCols (La cadena de caracteres) y Dom (Conjunto de números)
    constraints = [] #Definimos una lista constraints vacia donde se almacenarán las listas que contengan columnas, filas y cajas

    # Filas (Crea las filas y las almacena dentro de una lista, las 9 listas creadas  las unirá por medio de un append a la lista principal constraints)
    for i in Dom:
        constraint_row = [f"{id}{i}" for id in IdCols]
        constraints.append(constraint_row)

    # Columnas (Crea las columnas y las almacena dentro de una lista, las 9 listas creadas  las unirá por medio de un append a la lista principal constraints)
    for id in IdCols:
        constraint_col = [f"{id}{i}" for i in Dom]
        constraints.append(constraint_col)

    # Cajas (Crea las cajas y las almacena dentro de una lista,las 9 listas creadas  las unirá por medio de un append a la lista principal constraints)
    for row_start in range(1, 10, 3):
        for col_start in range(0, 9, 3):
            box = []
            for i in range(3):
                for j in range(3):
                    row = row_start + i
                    col = col_start + j
                    box.append(f"{IdCols[col]}{row}")
            constraints.append(box)

    return constraints
